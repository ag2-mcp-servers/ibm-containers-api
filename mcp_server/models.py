# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T17:23:10+00:00

from __future__ import annotations

from datetime import datetime
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel


class Binding(BaseModel):
    ContainerId: Optional[str] = Field(
        None, description='Unique identifier representing a container'
    )


class Certificate(BaseModel):
    ca_cert: str = Field(
        ...,
        description='Certificate Authority (CA) certificate including the CA public key.',
    )
    server_cert: str = Field(
        ..., description="Server certificate including the server's public key."
    )
    user_cert: str = Field(
        ..., description="User certificate including the user's public key."
    )
    user_key: str = Field(..., description="User's private key.")


class CertificateRefresh(BaseModel):
    ca_cert: Optional[str] = Field(
        None,
        description='Certificate Authority (CA) certificate including the CA public key.',
    )
    reg_host: Optional[str] = Field(
        None, description='Full URL to the IBM Bluemix registry.'
    )
    server_cert: Optional[str] = Field(
        None, description="Server certificate including the server's public key."
    )
    user_cert: Optional[str] = Field(
        None, description="User certificate including the user's public key."
    )
    user_key: Optional[str] = Field(None, description="User's private key.")


class ContainerConfig(BaseModel):
    ArgsEscaped: Optional[bool] = Field(None, description='')
    AttachStderr: Optional[str] = Field(
        None, description='Attaches the container to stderr.'
    )
    AttachStdin: Optional[str] = Field(
        None, description='Attaches the container to sdtin.'
    )
    AttachStdout: Optional[str] = Field(
        None, description='Attaches the container to stdout.'
    )
    Cmd: Optional[List[str]] = Field(
        None,
        description='The command and arguments in this list are passed to the container to be executed when the container is started. This command must be a long-running command. Do not use a short-lived command, for example, /bin/date, because it might cause the container to crash. <br>Sample long-running commands:<br>["ping","localhost"]<br>["tail","-f","/dev/null"]<br>["sh","-c","while true; do date; sleep 20; done"]\n',
    )
    Domainname: Optional[str] = Field(
        None, description='The domain name to be used for the container.'
    )
    Env: Optional[List[str]] = Field(
        None,
        description='A list of environment variables in the form of key=value pairs. All keys in this list have to be unique. List multiple keys separately and if you include quotation marks, include them around both the environment variable name and the value.',
    )
    ExposedPorts: Optional[List[str]] = Field(
        None,
        description='List of public ports that were exposed during container creation. ',
    )
    Hostname: Optional[str] = Field(
        None, description='The host name to be used for the container.'
    )
    Image: Optional[str] = Field(
        None,
        description='Full path to the image that the container is based on in your private Bluemix registry.',
    )
    ImageArchitecture: Optional[str] = Field(
        None,
        description="The hardware architecture the image is based on. It can either be 'amd64' indicating an Intel-based architecture, or 'ppc64le' representing a Power-based architecture.",
    )
    Labels: Optional[List[str]] = Field(
        None,
        description='List of custom metadata that was added to the container. Labels serve a wide range of uses, such as adding notes to a container. Every label is a key/ value pair.',
    )
    Memory: Optional[int] = Field(
        None,
        description='The amount of container memory that is assigned to the container in Megabyte.',
    )
    MemorySwap: Optional[str] = Field(
        None, description='The total container memory limit (memory + swap)'
    )
    OpenStdin: Optional[str] = Field(
        None, description='When set to true, it opens stdin. '
    )
    PortSpecs: Optional[str] = Field(
        None, description='Not supported by IBM Containers, empty string.'
    )
    StdinOnce: Optional[str] = Field(
        None,
        description='When set to true it closes stdin after the attached client disconnects.',
    )
    Tty: Optional[str] = Field(
        None,
        description='When set to true, attach standard streams to a tty, including stdin if it is not closed.',
    )
    User: Optional[str] = Field(
        None, description='User to be used inside the container.'
    )
    VCPU: Optional[int] = Field(
        None, description='Number of virtual CPUs that are assigned to the container.'
    )
    VolumesFrom: Optional[str] = Field(
        None,
        description='List of volumes to inherit from another container. This feature is not supported in IBM Containers.',
    )
    WorkingDir: Optional[str] = Field(
        None,
        description='The working directory inside the container where specified commands are executed. ',
    )


class ContainerId(BaseModel):
    Id: Optional[str] = Field(None, description='Unique ID representing a container.')
    flavor_id: Optional[int] = Field(None, description='The ID of the container size.')
    mem: Optional[int] = Field(
        None,
        description='The amount of container memory that has been assigned to the container. If the container memory was not specified in the API request, a container with 64 Megabyte container memory is created by default.',
    )
    vcpu: Optional[int] = Field(
        None, description='Number of virtual CPUs that are assigned to the container.'
    )


class ContainerState(BaseModel):
    ExitCode: Optional[str] = Field(
        None,
        description='The exit code indicating the root cause of why the container exited. Review the Docker API documentation to find a list of exit codes and their meaning. ',
    )
    FinishedAt: Optional[str] = Field(
        None, description='Time when the container stopped.'
    )
    Ghost: Optional[str] = Field(
        None, description='Not supported by IBM Containers, empty string'
    )
    Pid: Optional[int] = Field(
        None,
        description='The process ID on the compute host that runs the container process.',
    )
    Running: Optional[bool] = Field(
        None,
        description='If set to true, the container is in a RUNNING state. If set to false, the container has stopped or crashed. ',
    )
    StartedAt: Optional[str] = Field(
        None, description='Time when the container started.'
    )
    Status: Optional[str] = Field(
        None,
        description='The current status of the container. This state can either be transient, such as BUILDING or NETWORKING, or non-transient, such as RUNNING, SHUTDOWN, CRASHED, or SUSPENDED.',
    )


class ContainersGroupsGetListItem(BaseModel):
    Creation_time: Optional[str] = Field(
        None, description='Time when the container group is created.'
    )
    Id: Optional[str] = Field(
        None, description='Unique identifier of the container group.'
    )
    Name: Optional[str] = Field(None, description='Name of the container group.')
    Port: Optional[int] = Field(
        None,
        description='The port number that is exposed to the public during container group creation.',
    )
    Routes: Optional[List[str]] = Field(
        None,
        description='The public route that is mapped to the container group. You can use this route to access your container group from the Internet.',
    )
    Status: Optional[str] = Field(
        None,
        description='Current status of the container group. The container group status is a composite of ACTION and STATUS:<br><br> ACTIONS = (CREATE, DELETE, UPDATE, ROLLBACK, SUSPEND, RESUME, ADOPT, SNAPSHOT, CHECK, RESTORE)<br><br> STATUSES = (IN_PROGRESS, FAILED, COMPLETE)',
    )
    Updated_time: Optional[str] = Field(
        None, description='Time when the container group is changed and updated.'
    )


class NumberInstances(BaseModel):
    CurrentSize: Optional[int] = Field(
        None,
        description='The current number of container instances that are running in your container group. ',
    )
    Desired: Optional[int] = Field(
        None, description='The number of container instances that you require.'
    )
    Max: Optional[int] = Field(
        None,
        description='The maximum number of container instance that you want to run in your container group.',
    )
    Min: Optional[int] = Field(
        None,
        description='The minimum number of container instances that you want to run in your container group.',
    )


class RouteStatus(BaseModel):
    in_progress: Optional[bool] = Field(
        None,
        description='Can be either true or false. If set to true, then the route is in the process of being mapped to the container group and set up in the GoRouter. Is set to false, then the set up of the route is completed.',
    )
    message: Optional[str] = Field(None, description='Info message for the user.')
    successful: Optional[bool] = Field(
        None,
        description='Can be either true or false. If set to true, then the route is successfully registrered with the GoRouter. If set to false, then the route registration has not yet finished yet or could not be completed without errors.',
    )


class ContainersGroupsNameOrIdGetDetails(BaseModel):
    Anti_affinity: Optional[str] = Field(
        None,
        alias='Anti-affinity',
        description='If set to `true` the container instances in the group are spread across separate physical compute nodes, which reduces the likelihood of containers crashing due to hardware failures. If set to `false`, the container instances in the group share the same physical compute node. ',
    )
    Autorecovery: Optional[str] = Field(
        None,
        description='Can be either true or false. If set to true, the Autorecovery mode is enabled for your container group. In case a container instance crashes or stops, this instance is removed and a new one is automatically recreated. If set to false, the Autorecovery mode is disabled. In case a container instances crashes or stops, it is not automatically recreated by IBM Containers.',
    )
    AvailabilityZone: Optional[str] = Field(
        None, description='Current IBM Containers availability zone on Openstack. '
    )
    Cmd: Optional[List[str]] = Field(
        None,
        description='The Docker command that was specified to be run when the container instances are started. ',
    )
    Creation_time: Optional[str] = Field(
        None, description='Timestamp when the container group was created.'
    )
    Env: Optional[List[str]] = Field(
        None,
        description='The list of environmental variables that were defined for the container group. Each environment variable consists of a unique key and a value.',
    )
    Id: Optional[str] = Field(
        None, description='Unique identifier representing a specific container group.'
    )
    Image: Optional[str] = Field(
        None,
        description='The unique ID of the container image your container group instances are based on.',
    )
    ImageName: Optional[str] = Field(
        None,
        description='The full path to the container image in your private Bluemix repository.',
    )
    Memory: Optional[int] = Field(
        None,
        description='The size of each container instance that runs in the container group in MegaByte.',
    )
    Name: Optional[str] = Field(None, description='The name of the container group.')
    NumberInstances_1: Optional[NumberInstances] = Field(None, alias='NumberInstances')
    Port: Optional[int] = Field(
        None,
        description='The public port that has been exposed. If you specified a route, your container group is accessible from the Internet. ',
    )
    Route_Status: Optional[RouteStatus] = None
    Routes: Optional[List[str]] = Field(
        None,
        description='The public route that is mapped to the container group. When you expose a public port, you can use the route to access your container group from the Internet.',
    )
    Status: Optional[str] = Field(
        None,
        description='The current status of the container group. The container group status is a composite of ACTION and STATUS:<br><br> ACTIONS = (CREATE, DELETE, UPDATE, ROLLBACK, SUSPEND, RESUME, ADOPT, SNAPSHOT, CHECK, RESTORE)<br><br> STATUSES = (IN_PROGRESS, FAILED, COMPLETE)',
    )
    UpdatedTime: Optional[str] = Field(
        None,
        description='Timestamp when the container group was updated. If the container group was not updated before, `null` is returned.',
    )
    Volumes: Optional[List[str]] = Field(
        None,
        description='List of volumes to be associated with the container, in the format of volume name:path:mode where mode can be ro or rw.',
    )


class NumberInstances1(BaseModel):
    Desired: Optional[int] = Field(
        None, description='The number of container instances that you require.'
    )
    Max: Optional[int] = Field(
        None,
        description='The maximum number of container instances that you want to run in your container group.',
    )
    Min: Optional[int] = Field(
        None,
        description='The minimum number of container instances that you want to run in your container group.',
    )


class ContainersGroupsNameOrIdPatchUpdatedInfo(BaseModel):
    Autorecovery: Optional[str] = Field(
        None,
        description='Enable or disable the Autorecovery mode for your container group. To enable it, enter true. If you want to disable it, enter false. Note: You can only enable/ disable Autorecovery mode if your container group was initially created with Autorecovery mode enabled.',
    )
    Environment: Optional[List[str]] = Field(
        None,
        description='A list of environment variables that you want to add to your container group. Every environment variable needs to be a key=value pair. Every key that you use needs to be unique for this container group. Multiple environment variables are separated with comma (,)',
    )
    NumberInstances: Optional[NumberInstances1] = None


class ContainersGroupsPostCreatedInfo(BaseModel):
    Id: Optional[str] = Field(
        None, description='Unique identifier representing a specific container group.'
    )
    Warnings: Optional[List[str]] = Field(
        None, description='Warning information (Initial warning is empty).'
    )


class NumberInstances2(BaseModel):
    Desired: Optional[int] = Field(
        None,
        description='(Optional) The number of container instances that you require.',
    )
    Max: Optional[int] = Field(
        None,
        description='(Optional) The maximum number of container instances that you want to run in your container group.',
    )
    Min: Optional[int] = Field(
        None,
        description='(Optional) The minimum number of container instances that need to run in your container group.',
    )


class Route(BaseModel):
    domain: Optional[str] = Field(
        None,
        description='The default system domain is mybluemix.net and already provides a SSL certificate, so you can access your container groups with HTTPS without any additional configuration.',
    )
    host: Optional[str] = Field(
        None,
        description='The host name of your container group, such as mycontainerhost. Do not include underscores (_) in the host name. The host and the domain combined form the full public route URL, such as http://mycontainerhost.mybluemix.net. ',
    )


class ContainersGroupsPostRequiredAttributes(BaseModel):
    Autorecovery: Optional[str] = Field(
        None,
        description='(Optional) Enable the Auto-recovery mode for your container group. If set to true, IBM Containers checks the health of each instance with an HTTP request to the port that is assigned. If the health check does not receive a TCP response from a container instance in two subsequent 90-second intervals, the instance is removed and replaced with a new instance. If set to false and container instances crash, they are not recovered by IBM Containers.',
    )
    BluemixApp: Optional[str] = Field(
        None,
        description='(Optional) The name of the Cloud Foundry app that you created in your organization space.',
    )
    Cmd: Optional[List[str]] = Field(
        None,
        description='(Optional) Docker command that is passed to the container group to be run when the container instances are started. This command must be a long-running command. Do not use a short-lived command, for example, /bin/date, because it might cause the container to crash.',
    )
    Env: Optional[List[str]] = Field(
        None,
        description='(Optional) List of environmental variables. Every environment variable that is listed here needs to be a key=value pair. Every key that you use needs to be unique for this container group. Multiple environment variables are separated with comma (,).',
    )
    Image: str = Field(
        ...,
        description="(Required) The full path to your private Bluemix repository. If you want to use an image in your private Bluemix repository, specify the image in the following format: registry.ng.bluemix.net/NAMESPACE/IMAGE. If you want to use an IBM Containers provided image, do not include your organization's namespace. Specify the image in the following format: registry.ng.bluemix.net/IMAGE",
    )
    Memory: Optional[int] = Field(
        None,
        description='(Optional) The size of each container instance in the container group. The size of each container instance in the group. Choose one of the following sizes and enter the size in MegaBytes: Pico 64 MB, Nano 128 MB, Micro 256 MB, Tiny 512 MB, Small 1 GB (1024 MB), Medium 2 GB (2048 MB), Large 4 GB (4096 MB) XLarge 8GB (8192 MB) and 2XLarge 16 GB (16384 MB). If you do not specify a size, all container instances in this group are created with 256 MB.',
    )
    Name: str = Field(
        ...,
        description='(Required) Name of the container group that you want to create. The name needs to be unique in your organization space and must start with a letter. Then, you can include uppercase letters, lowercase letters, numbers, periods (.), underscores (_), or hyphens (-).',
    )
    NumberInstances: Optional[NumberInstances2] = None
    Port: Optional[int] = Field(
        None,
        description='(Optional) Expose a port for HTTP traffic to make your container group available from the Internet. Every container instance that is started for this group, listens on this port. Container groups cannot expose multiple ports. Note: You need to expose a port, when "Autorecovery" is set to true.',
    )
    Route_1: Optional[Route] = Field(None, alias='Route')
    Volumes: Optional[List[str]] = Field(
        None,
        description='(Optional) List of volumes to be mounted to the container instances of your container group. You need to create the volume first by using the cf ic volume-create command before you can mount a volume to a container group. When you specify a volume, use the following format: NAME:PATH:MODE. For NAME, use either the name or ID of the volume. For the PATH, enter the absolute path to the volume directory in the container. For MODE, enter either ro (read-only) or rw (read-write).',
    )


class OrgQuota(BaseModel):
    floating_ips_max: Optional[str] = Field(
        None,
        description='The number of public IP addresses that can be assigned across all spaces of the organization.',
    )
    floating_ips_space_default: Optional[str] = Field(
        None,
        description='The number of public IP addresses that are required for one space. If the number of public IP addresses is not available, then a new space cannot be created to be used with IBM Containers. ',
    )
    floating_ips_usage: Optional[int] = Field(
        None,
        description='The number of public IP addresses that are currently assigned to the spaces of the organization.',
    )
    ram_max: Optional[int] = Field(
        None,
        description='The maximum amount of container memory on the compute host that can be assigned across the spaces of the organization.',
    )
    ram_space_default: Optional[int] = Field(
        None,
        description='The amount of container memory that is required to be used for one space. If this amount is not available, then a new space cannot be created to be used with IBM Containers. ',
    )
    ram_usage: Optional[int] = Field(
        None,
        description='The amount of container memory that is currently used across all spaces of the organization.',
    )
    subnet_usage: Optional[int] = Field(
        None,
        description='The number of subnets that were created across all spaces of the organization.',
    )
    subnets_default: Optional[int] = Field(
        None,
        description='The number of subnets that is required to create a new space. If this number is not available, then a new space cannot be created to be used with IBM Containers.',
    )
    subnets_max: Optional[int] = Field(
        None,
        description='The maximum number of container private subnet that can be created across all spaces of the organization.',
    )


class SpaceQuota(BaseModel):
    floating_ips_max: Optional[str] = Field(
        None,
        description='The maximum number of public IP addresses that can be allocated to a space.',
    )
    ram_max: Optional[int] = Field(
        None,
        description='The maximum amount of container memory that can be shared across all containers that are created in a space.',
    )
    subnets_max: Optional[int] = Field(
        None,
        description='The maximum number of private subnets that can be created in one space.',
    )


class ContainersQuotaInfo(BaseModel):
    account_type: Optional[str] = Field(
        None,
        description='The Bluemix account type indicating the quota limits and how the organization is billed.',
    )
    country_code: Optional[str] = Field(
        None, description='The country in which the account was opened.'
    )
    org_quota: Optional[OrgQuota] = None
    space_quota: Optional[SpaceQuota] = None


class ContainersQuotaList(BaseModel):
    floating_ips: Optional[int] = Field(
        None,
        description='The new number of public IP addresses that you want to assign to your space.',
    )
    ram: Optional[int] = Field(
        None,
        description='The amount of container memory that you want to assign to your space.',
    )


class Limits(BaseModel):
    containers: Optional[int] = Field(
        None,
        description='The number of containers that can be created in the space. If -1 is returned, then an unlimited number of containers can be created. The number however is counted towards and limited by the container memory. ',
    )
    floating_ips: Optional[int] = Field(
        None,
        description='The number of public IP addresses that can be allocated to the space.',
    )
    memory_MB: Optional[int] = Field(
        None,
        description='The amount of container memory that can be used in the space in megabyte.',
    )
    vcpu: Optional[int] = Field(
        None, description='The number of virtual CPUs that are assigned to the space.'
    )


class Usage(BaseModel):
    containers: Optional[int] = Field(
        None,
        description='The number of containers that were created in the space. All containers that count towards the quota limit are listed independent on their current state.',
    )
    floating_ips: Optional[int] = Field(
        None,
        description='The number of public IP addresses that are allocated to the space.',
    )
    floating_ips_bound: Optional[int] = Field(
        None,
        description='The number of public IP addresses that are bound to a container in the space.',
    )
    images: Optional[int] = Field(
        None,
        description='The number of private images that were added to the private Bluemix registry.',
    )
    memory_MB: Optional[int] = Field(
        None,
        description='The amount of container memory that is already used by the containers that were created in the space in megabyte.',
    )
    running: Optional[int] = Field(
        None,
        description='The number of containers that are currently in a running state.',
    )
    vcpu: Optional[int] = Field(
        None, description='The number of virtual CPUs that are allocated to the space.'
    )


class ContainersUsageInfoAvailableSizes(BaseModel):
    disk: Optional[int] = Field(
        None,
        description='The amount of disk space on the compute host that is assigned to the container in gigabyte',
    )
    id: Optional[str] = Field(None, description='The ID of the container size.')
    memory_MB: Optional[int] = Field(
        None,
        description='The amount of container memory on the compute host that is assigned to the container in megabyte.',
    )
    name: Optional[str] = Field(
        None, description='The IBM Containers name of the container size.'
    )
    vcpus: Optional[int] = Field(
        None,
        description='The number of virtual CPUs that can be assigned to the container.',
    )


class BuildDetail(BaseModel):
    api: Optional[str] = Field(
        None, description='The build ID of the current API version.'
    )
    automount: Optional[str] = Field(
        None, description='The build ID of the current automount microservice version.'
    )
    grupdater: Optional[str] = Field(
        None, description='The build ID of the current grupdater microservice version.'
    )
    harmony: Optional[str] = Field(
        None, description='The build ID of the current harmony microservice version.'
    )
    health_monitor: Optional[str] = Field(
        None,
        alias='health-monitor',
        description='The build ID of the current health-monitor microservice version.',
    )
    hijack: Optional[str] = Field(
        None, description='The build ID of the current hijack microservice version.'
    )
    ldap: Optional[str] = Field(
        None, description='The build ID of the current ldap microservice version.'
    )
    logmet: Optional[str] = Field(
        None, description='The build ID of the current logmet microservice version.'
    )
    lumberjack: Optional[str] = Field(
        None, description='The build ID of the current lumberjack microservice version.'
    )
    redis_cluster: Optional[str] = Field(
        None,
        alias='redis-cluster',
        description='The build ID of the current redis-cluster version.',
    )
    sgwatcher: Optional[str] = Field(
        None, description='The build ID of the current sgwatcher microservice version.'
    )
    volmgr: Optional[str] = Field(
        None,
        description='The build ID of the current volumes manager microservice version.',
    )


class ContainersVersionGetInfo(BaseModel):
    ApiVersion: Optional[str] = Field(None, description='The current API version.')
    Arch: Optional[str] = Field(None, description='The current Arch version.')
    BuildDetail_1: Optional[BuildDetail] = Field(None, alias='BuildDetail')
    BuildID: Optional[str] = Field(None, description='')
    BuildNumber: Optional[str] = Field(None, description='')
    BuildTime: Optional[str] = Field(
        None,
        description='Timestamp when the API version and all attached microservices were built.',
    )
    GitCommit: Optional[str] = Field(None, description='')
    GoVersion: Optional[str] = Field(None, description='The latest Go version.')
    KernelVersion: Optional[str] = Field(None, description='The latest Kernel version.')
    Os: Optional[str] = Field(None, description='Bluemix Containers')
    Version: Optional[str] = Field(None, description='The latest API version.')


class Fileshare(BaseModel):
    capacity: Optional[int] = Field(
        None, description='The size of the file share in gigabyte.'
    )
    created_date: Optional[str] = Field(
        None, description='The timestamp when the file share was created.'
    )
    fsName: Optional[str] = Field(None, description='The name of the file share.')
    hostPath: Optional[str] = Field(
        None, description='The path to the volume on the host node.'
    )
    iops: Optional[float] = Field(
        None, description='The number of Input/Output operations per second. '
    )
    iopsTotal: Optional[int] = Field(
        None,
        description='The total number of IOPS considering the size of the file share. The size of your file share in gigabyte multiplied with the number of IOPS indicates the total number of IOPS. The higher the number of IOPS the faster you can read from and write to your volumes.',
    )
    orderId: Optional[str] = Field(
        None,
        description='The ID received from softlayer when the file share was ordered to be set up in softlayer.',
    )
    provider: Optional[str] = Field(None, description='The provider of the file share.')
    spaceGuid: Optional[str] = Field(
        None,
        description='The unique ID representing a Bluemix space in which the file share was created.',
    )
    state: Optional[str] = Field(
        None,
        description='The current state of the file share. When the file share is ready to be used, this attribute is set to `READY`.',
    )
    updated_date: Optional[str] = Field(
        None, description='The timestamp when the file share last was updated.'
    )


class FileshareParam(BaseModel):
    fsIOPS: float = Field(
        ...,
        description='The number of input/output transactions per second. Available values are 0.25, 2 or 4.',
    )
    fsName: str = Field(
        ...,
        description='The name of the new file share that you want to create. The name can contain uppercase letters, lowercase letters, numbers, underscores (_), and hyphens (-).',
    )
    fsSize: int = Field(
        ...,
        description='The size of the file share in gigabyte. Run `cf ic volume fs-flavor-list` or call the GET /volumes/fs/flavors/json API endpoint to retrieve a list of available file share sizes. ',
    )


class FileshareUsage(BaseModel):
    available_space: Optional[str] = Field(
        None,
        description='The amount of space that is available in the file share in gigabytes.',
    )
    total_space: Optional[str] = Field(
        None, description='The total size of the file share in gigabytes.'
    )
    used_space: Optional[str] = Field(
        None,
        description='The amount of space that is currently used from the file share. ',
    )
    used_space_percentage: Optional[str] = Field(
        None,
        description='The amount of space that is currently used from the file share in percentage.',
    )


class FloatingIP(BaseModel):
    Bindings: Optional[Binding] = None
    IpAddress: Optional[str] = Field(
        None,
        description='The public IP address that is allocated to the organization space.',
    )


class GetFileshareDetails(BaseModel):
    fs: Optional[List[Fileshare]] = None
    fsUsage: Optional[List[FileshareUsage]] = None
    volnames: Optional[List[str]] = Field(
        None, description='A list of volume names that are mounted to the file share.'
    )


class Group(BaseModel):
    Id: Optional[str] = Field(
        None, description='Unique identifier representing a group.'
    )
    Name: Optional[str] = Field(None, description='Name of the group.')


class HostConfig(BaseModel):
    Binds: Optional[List[str]] = Field(
        None,
        description='A list of volumes to be bound to the container. Each volume must be listed in the following format: VOLNAME:/CONTAINER_PATH:rw [ro]. ',
    )
    ExtraHosts: Optional[List[str]] = Field(
        None,
        description='A list of hostnames/IP mappings to be added to the container’s /etc/hosts file. Specified in the form ["hostname:IP"]\n',
    )
    Links: Optional[List[str]] = Field(
        None, description='A list of containers that need to be linked.'
    )
    PortBindings: Optional[List[str]] = Field(
        None,
        description='The container ports that you want to expose to the public. Ports need to be specified in the form of &lt;port&gt;/&lt;protocol&gt;: [{ "HostIp": "&lt;IP&gt;", "HostPort": "&lt;port&gt;" }]\n',
    )


class Config(BaseModel):
    ArgsEscaped: Optional[bool] = Field(None, description='')
    AttachStderr: Optional[bool] = Field(
        None, description='Attaches the container to stderr.'
    )
    AttachStdin: Optional[bool] = Field(
        None, description='Attaches the container to stdin.'
    )
    AttachStdout: Optional[bool] = Field(
        None, description='Attaches the container to stdout.'
    )
    Cmd: Optional[List[str]] = Field(
        None,
        description='The command and arguments in this list are passed to the container to be executed when the container is started. This command must be a long-running command. Do not use a short-lived command, for example, /bin/date, because it might cause the container to crash. <br>Sample long-running commands:<br>["ping","localhost"]<br>["tail","-f","/dev/null"]<br>["sh","-c","while true; do date; sleep 20; done"]\n',
    )
    Domainmame: Optional[str] = Field(
        None, description='The domain name to be used for the container.'
    )
    Entrypoint: Optional[str] = Field(
        None,
        description='The entrypoint specifies a command that will always be executed when the container starts.',
    )
    Env: Optional[List[str]] = Field(
        None,
        description='A list of environment variables in the form of key=value pairs. All keys in this list have to be unique. List multiple keys separately and if you include quotation marks, include them around both the environment variable name and the value.',
    )
    ExposedPorts: Optional[List[str]] = Field(
        None,
        description='A list of all udp and tcp ports that have been publicly exposed during the container creation.',
    )
    Hostname: Optional[str] = Field(
        None, description='The host name of the container provided by Openstack. '
    )
    Image: Optional[str] = Field(None, description='The unique ID of the image. ')
    Labels: Optional[List[str]] = Field(
        None,
        description='List of custom metadata that was added to the image. Labels serve a wide range of uses, such as adding notes or license requirements to an image. Every label is a key/ value pair.',
    )
    OnBuild: Optional[List[str]] = Field(None, description='???')
    OpenStdin: Optional[bool] = Field(
        None, description='When set to true, it opens stdin.'
    )
    StdinOnce: Optional[bool] = Field(
        None,
        description='When set to true it closes stdin after the attached client disconnects.',
    )
    Tty: Optional[bool] = Field(
        None,
        description='When set to true, attach standard streams to a tty, including stdin if it is not closed.',
    )
    User: Optional[str] = Field(
        None, description='The user to be used inside the container.'
    )
    Volumes: Optional[str] = Field(
        None,
        description='Docker specific. Not supported by IBM Containers. The path to the volume that is created when deploying a container from the image. To use a volume in IBM Containers, you must first create a volume and then mount it to your container during creation.',
    )
    WorkingDir: Optional[str] = Field(
        None,
        description='The working directory inside the container where specified commands are executed.',
    )


class ImageDetail(BaseModel):
    Architecture: Optional[str] = Field(
        None,
        description='The hardware architecture for which the image was built for. The architecture can either be Intel (amd64) or Power (ppc64le). ',
    )
    Config_1: Optional[Config] = Field(None, alias='Config')
    Container: Optional[str] = Field(None, description='???')
    ContainerConfig_1: Optional[ContainerConfig] = Field(None, alias='ContainerConfig')
    Created: Optional[str] = Field(
        None, description='The time when the image was created.'
    )
    DockerVersion: Optional[str] = Field(None, description='???')
    Id: Optional[str] = Field(
        None, description='Unique ID of the image that you inspected. '
    )
    Os: Optional[str] = Field(None, description='???')
    Parent: Optional[str] = Field(
        None,
        description='The ID of the parent image that was used to build this image.',
    )
    Size: Optional[int] = Field(None, description='The real size of the image. ')
    Tag: Optional[str] = Field(None, description='The version of the image ')
    Throwaway: Optional[str] = Field(None, description='???')
    VirtualSize: Optional[int] = Field(
        None, description='The virtual size of the image.'
    )


class ImageInfo(BaseModel):
    Created: Optional[float] = Field(
        None, description='The time when your container image was created. '
    )
    Id: Optional[str] = Field(
        None, description='The unique identifier representing a container image. '
    )
    Image: Optional[str] = Field(None, description='The name of your container image.')
    RepoTags: Optional[List[str]] = Field(
        None,
        description='The full path to the private Bluemix registry where the image is stored including the registry name, the organization namespace, and image tag.',
    )
    Size: Optional[int] = Field(
        None, description='The real size of the container image.'
    )
    VirtualSize: Optional[int] = Field(
        None, description='The virtual size of the container image.'
    )


class Namespace(BaseModel):
    namespace: Optional[str] = Field(
        None,
        description='The namespace that is either set for an organization, or a namespace that is not available to be used in Bluemix.',
    )


class Network(BaseModel):
    Aliases: Optional[str] = Field(
        None,
        description='Alternative name of the private container network the container is connected to.',
    )
    EndpointID: Optional[str] = Field(
        None, description='Unique ID representing a container.'
    )
    Gateway: Optional[str] = Field(
        None,
        description='The private IP address of the network gateway in IPv4 format.',
    )
    GlobalIPv6Address: Optional[str] = Field(
        None,
        description='Private IP address of the container in IPv6 format. IBM Containers only supports IPv4 format. This attribute is returned as empty.',
    )
    GlobalIPv6PrefixLen: Optional[int] = Field(
        None, description='Not supported by IBM Containers, empty string.'
    )
    IPAMConfig: Optional[str] = Field(
        None, description='Specific configurations for the network driver.'
    )
    IPPrefixLen: Optional[str] = Field(
        None,
        description='The prefix of the subnet in the private container network. The prefix indicates that 16 bits out of 32 bits are used to address the network. As every IPv4 IP adress consists of 32 bits, the last 16 bits are used to assign private IP addresses to the container. ',
    )
    IPv6Gateway: Optional[str] = Field(
        None,
        description='The private IP address of the network gateway in IPv6 format. IBM Containers only supports IPv4 format. This attribute is returned as empty.',
    )
    Links: Optional[str] = Field(
        None, description='List of container names that are linked to the container. '
    )
    MacAddress: Optional[str] = Field(
        None, description='The MAC address that is assigned to the container.'
    )
    NetworkID: Optional[str] = Field(
        None,
        description='Unique identifier representing the private container network.',
    )


class NetworkSetting(BaseModel):
    Bridge: Optional[str] = Field(
        None, description='The name of the private network bridge.'
    )
    Gateway: Optional[str] = Field(
        None,
        description='The IP address of the private network gateway in IPv4 format.',
    )
    IpAddress: str = Field(
        ..., description='The private IP address that is assigned to the container.'
    )
    IpPrefixLen: Optional[int] = Field(None, description='')
    MacAddress: Optional[str] = Field(
        None, description='The MAC address that was assigned to the container. '
    )
    Network_1: Optional[Network] = Field(None, alias='Network')
    PortMapping: Optional[str] = Field(
        None,
        description='Specific to Docker. List of private container ports and their mapping to the host ports. In IBM Containers all container ports are exposed on the host by default. This attribute is returned as an empty list. ',
    )
    Ports: Optional[List[str]] = Field(
        None, description='All ports of the container that were exposed to the public.'
    )
    PublicIpAddress: str = Field(
        ..., description='The Public IP address that was bound to the container.'
    )


class Port(BaseModel):
    IP: Optional[str] = Field(
        None,
        description='Public IP address that was bound to the container in IPv4 format.',
    )
    PrivatePort: Optional[str] = Field(
        None,
        description='The private port of the container on which the container listens during run time.',
    )
    PublicPort: Optional[str] = Field(
        None,
        description='The public port that was exposed during container creation. When a public port is exposed, a public IP address can be bound to the container which makes the container accessible from the internet.',
    )
    Type: Optional[str] = Field(
        None,
        description='The type of IP protocol that is used for the port. It can either be `udp` or `tcp`.  ',
    )


class Route1(BaseModel):
    domain: Optional[str] = Field(
        None,
        description='The default system domain is mybluemix.net and already provides a SSL certificate, so you can access your container groups with HTTPS without any additional configuration.',
    )
    host: Optional[str] = Field(
        None,
        description='The host name of your container group, such as mycontainerhost. Do not include underscores (_) in the host name. The host and the domain combined form the full public route URL, such as http://mycontainerhost.mybluemix.net.',
    )


class UpdateVolume(BaseModel):
    addSpaces: Optional[List[str]] = Field(
        None,
        description='The name or ID of the space where you want to provision your existing volume. Run `cf spaces` to retrieve the name, or `cf space <space_name> --guid` to retrieve the space ID. ',
    )
    removeSpaces: Optional[List[str]] = Field(
        None,
        description='The name or ID of the space from which you want to unprovision your existing volume. Run `cf spaces` to retrieve the name, or `cf space <space_name> --guid` to retrieve the space ID.',
    )


class Volume(BaseModel):
    fsID: Optional[str] = Field(
        None,
        description=' Unique identifier representing the file share on which the volume is hosted. ',
    )
    hostPath: Optional[str] = Field(
        None, description='Full path to the mounted volume inside the container.'
    )
    otherSpaceVisibility: Optional[List[str]] = Field(
        None,
        description='List of space IDs in which the volume is visible and can be used by all the single containers and container groups. ',
    )
    spaceGuid: Optional[str] = Field(
        None,
        description='Unique identifier representing the space where the volume got created.',
    )
    volName: Optional[str] = Field(None, description='The name of the volume.')


class GetContainerStatus(BaseModel):
    NameOrId: str = Field(..., description='The unique identifier of the container. ')
    Status: Optional[str] = Field(
        None,
        description='The current status of the container. The status can either be a transient one, such as BUILDING or NETWORKING, or a non-transient one, such as RUNNING, SHUTDOWN, CRASHED, or SUSPENDED. ',
    )
    Transient: Optional[bool] = Field(
        None,
        description='When set to true, the current container state is temporary and will change soon. An example for a transient state is the BUILDING state. A container that is created will be set to the BUILDING state until all container layers are created and the container is started. When set to false, the container state is permanent, such as CRASHED.',
    )


class ContainersFloatingIpsGetResponse(RootModel[List[FloatingIP]]):
    root: List[FloatingIP]


class ContainersGroupsGetResponse(RootModel[List[ContainersGroupsGetListItem]]):
    root: List[ContainersGroupsGetListItem]


class ContainersMessagesGetResponse(BaseModel):
    created_date: Optional[str] = Field(
        None, description='Timestamp when the message was created.'
    )
    message: Optional[str] = Field(
        None, description='Important information for the IBM Containers user.'
    )


class VolumesFsFlavorsJsonGetResponse(RootModel[List[int]]):
    root: List[int]


class VolumesFsJsonGetResponse(RootModel[List[Fileshare]]):
    root: List[Fileshare]


class VolumesFsNameJsonGetResponse(RootModel[List[GetFileshareDetails]]):
    root: List[GetFileshareDetails]


class VolumesJsonGetResponse(RootModel[List[Volume]]):
    root: List[Volume]


class Container(BaseModel):
    Command: Optional[str] = Field(
        None,
        description='The command and arguments that were passed to the container during container creation. This command is executed when the container is started.',
    )
    ContainerState: Optional[str] = Field(
        None,
        description='The current status of the container. The status can either be a transient state, such as BUILDING, and NETWORKING or a non-transient state, such as RUNNING, SHUTDOWN, CRASHED, PAUSED, or SUSPENDED. ',
    )
    Created: Optional[float] = Field(
        None, description='The time when the container was created.'
    )
    Env: Optional[List[str]] = Field(
        None, description='A list of all the environment variables of the container.'
    )
    Group_1: Optional[Group] = Field(None, alias='Group')
    Id: Optional[str] = Field(
        None, description='Unique identifier representing a container.'
    )
    Image: Optional[str] = Field(
        None,
        description='Full path to the container image in your private Bluemix registry.',
    )
    ImageId: Optional[str] = Field(
        None, description='Unique identifier representing a container image.'
    )
    Labels: Optional[Dict[str, Any]] = Field(
        None,
        description='List of custom metadata that was added to the container. Labels serve a wide range of uses, such as adding notes to a container. Every label is a key/ value pair.',
    )
    Memory: Optional[int] = Field(
        None,
        description='The amount of container memory in Megabyte that was assigned to your container. The memory is counted towards the quota that is allocated for the space.',
    )
    Name: Optional[str] = Field(None, description='The name of the container. ')
    Names: Optional[List[str]] = Field(None, description='The name of the container.')
    NetworkSettings: Optional[NetworkSetting] = None
    Ports: Optional[Port] = None
    SizeRootFs: Optional[int] = Field(
        None, description='Total size of all the files in the container, in bytes. '
    )
    SizeRw: Optional[int] = Field(
        None,
        description='The size of the files which have been created or changed, if you compare the container to its base image. Just after creation, this should be zero. Ass you modify (or create) files, this size will increase.',
    )
    Started: Optional[float] = Field(
        None, description='Time when the container was started.'
    )
    Status: Optional[str] = Field(
        None,
        description='The current status of the container. The status can either be a transient state, such as BUILDING, and NETWORKING or a non-transient state, such as RUNNING, SHUTDOWN, CRASHED, PAUSED, or SUSPENDED',
    )
    VCPU: Optional[int] = Field(
        None, description='Number of virtual CPUs that are assigned to the container.'
    )


class ContainerInfo(BaseModel):
    BluemixApp: Optional[str] = Field(
        None,
        description='The name of the Cloud Foundry app that was bound to the container during creation.',
    )
    BluemixServices: Optional[str] = Field(
        None,
        description='The name of the Bluemix service instance that was bound to the container during creation.',
    )
    Config: Optional[ContainerConfig] = None
    ContainerState: Optional[str] = Field(
        None,
        description='The current status of the container. This state can either be transient, such as BUILDING or NETWORKING, or non-transient, such as RUNNING, SHUTDOWN, CRASHED, or SUSPENDED.',
    )
    Created: Optional[datetime] = Field(
        None, description='The date and time the container was created.'
    )
    Group_1: Optional[Group] = Field(None, alias='Group')
    HostConfig_1: Optional[HostConfig] = Field(None, alias='HostConfig')
    HostId: Optional[str] = Field(
        None, description='The ID representing the physical compute host.'
    )
    Human_Id: Optional[str] = Field(None, description='The name of the container. ')
    Id: Optional[str] = Field(
        None, description='Unique identifier representing a container.'
    )
    Image: Optional[str] = Field(
        None, description='Unique identifier representing a container image.'
    )
    Mounts: Optional[List[str]] = Field(
        None, description='A list of volumes that are mounted to the container.'
    )
    Name: Optional[str] = Field(None, description='The name of the container.')
    NetworkSettings: Optional[NetworkSetting] = None
    Path: Optional[str] = Field(
        None, description='The environment variable indicating the binary location.'
    )
    ResolveConfPath: Optional[str] = Field(
        None,
        description='Path to the resolve.conf file inside the container. The resolve.conf file is used to resolve the DNS servers.',
    )
    State: Optional[ContainerState] = None
    Volumes: Optional[Volume] = None
    VolumesRW: Optional[List[str]] = Field(
        None, description='LIst of volumes that is mounted to the container.'
    )


ContainersGroupsNameOrIdMaproutePostInfo = ContainersGroupsPostCreatedInfo


class ContainersUsageInfo(BaseModel):
    AvailableSizes: Optional[List[ContainersUsageInfoAvailableSizes]] = None
    Environment: Optional[str] = Field(
        None, description='The IBM Containers machine where the space is located'
    )
    Limits_1: Optional[Limits] = Field(None, alias='Limits')
    Usage_1: Optional[Usage] = Field(None, alias='Usage')


class CreateContainer(BaseModel):
    BluemixApp: Optional[str] = Field(
        None,
        description='The name of the Cloud Foundry app that you want to bind to your container. The Cloud Foundry app must be created in the same space where you want to create your container.',
    )
    Cmd: Optional[List[str]] = Field(
        None,
        description='The command and arguments in this list are passed to the container to be executed when the container is started. This command must be a long-running command. Do not use a short-lived command, for example, /bin/date, because it might cause the container to crash. <br>Sample long-running commands:<br>["ping","localhost"]<br>["tail","-f","/dev/null"]<br>["sh","-c","while true; do date; sleep 20; done"]\n',
    )
    Cpuset: Optional[str] = Field(
        None,
        description='Pins the container processes to a specific CPU core on the compute host. For example: 0 means that processes are executed on the first core only.',
    )
    Env: Optional[List[str]] = Field(
        None,
        description='A list of environment variables in the form of key=value pairs. All keys in this list have to be unique. List multiple keys separately and if you include quotation marks, include them around both the environment variable name and the value.',
    )
    ExposedPorts: Optional[List[str]] = Field(
        None,
        description='All public ports that need to be exposed for the container, so the container can be accessed from the Internet.',
    )
    HostConfig_1: Optional[HostConfig] = Field(None, alias='HostConfig')
    Image: str = Field(
        ...,
        description='Full path to the image in your private Bluemix registry in the format `registry.ng.bluemix.net/namespace/image`. ',
    )
    Memory: Optional[int] = Field(
        None,
        description='The container memory that is set for the container in Megabyte. Choose one of the following sizes: Pico 64 MB, Nano 128 MB, Micro 256 MB, Tiny 512 MB, Small 1 GB (1024 MB), Medium 2 GB (2048 MB), Large 4 GB (4096 MB) XLarge 8GB (8192 MB) and 2XLarge 16 GB (16384 MB).',
    )
    NumberCpus: Optional[int] = Field(
        None, description='Number of virtual CPUs that are allocated to the container.'
    )
    Volumes: Optional[str] = Field(
        None,
        description='Mount a volume to a container by specifying the details in the following format: `VOLUME_NAME:/DIRECTORY_PATH[:ro]`. Example: testvolume:/volumedata/temp:rw. By default, all volumes will be set up with read-write access inside the container (rw). If you wish to set up your volume with read-only access, enter `ro`.  Note: To mount a volume to a container, you must create the volume in your space first by using the `cf ic volume-create` command, or calling the `POST /volumes/create endpoint`.',
    )


class ContainersJsonGetResponse(RootModel[List[Container]]):
    root: List[Container]
